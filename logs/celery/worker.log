[2024-09-11 19:36:36,126: INFO/MainProcess] Connected to redis://message_broker:6379/0
[2024-09-11 19:36:36,132: INFO/MainProcess] mingle: searching for neighbors
[2024-09-11 19:36:37,147: INFO/MainProcess] mingle: all alone
[2024-09-11 19:36:37,176: INFO/MainProcess] celery@4da1728aa06b ready.
[2024-09-11 19:38:51,701: WARNING/MainProcess] consumer: Connection to broker lost. Trying to re-establish the connection...
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py", line 340, in start
    blueprint.start(self)
  File "/usr/local/lib/python3.10/site-packages/celery/bootsteps.py", line 116, in start
    step.start(parent)
  File "/usr/local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py", line 746, in start
    c.loop(*c.loop_args())
  File "/usr/local/lib/python3.10/site-packages/celery/worker/loops.py", line 97, in asynloop
    next(loop)
  File "/usr/local/lib/python3.10/site-packages/kombu/asynchronous/hub.py", line 373, in create_loop
    cb(*cbargs)
  File "/usr/local/lib/python3.10/site-packages/kombu/transport/redis.py", line 1352, in on_readable
    self.cycle.on_readable(fileno)
  File "/usr/local/lib/python3.10/site-packages/kombu/transport/redis.py", line 569, in on_readable
    chan.handlers[type]()
  File "/usr/local/lib/python3.10/site-packages/kombu/transport/redis.py", line 918, in _receive
    ret.append(self._receive_one(c))
  File "/usr/local/lib/python3.10/site-packages/kombu/transport/redis.py", line 928, in _receive_one
    response = c.parse_response()
  File "/usr/local/lib/python3.10/site-packages/redis/client.py", line 840, in parse_response
    response = self._execute(conn, try_read)
  File "/usr/local/lib/python3.10/site-packages/redis/client.py", line 816, in _execute
    return conn.retry.call_with_retry(
  File "/usr/local/lib/python3.10/site-packages/redis/retry.py", line 65, in call_with_retry
    fail(error)
  File "/usr/local/lib/python3.10/site-packages/redis/client.py", line 818, in <lambda>
    lambda error: self._disconnect_raise_connect(conn, error),
  File "/usr/local/lib/python3.10/site-packages/redis/client.py", line 805, in _disconnect_raise_connect
    raise error
  File "/usr/local/lib/python3.10/site-packages/redis/retry.py", line 62, in call_with_retry
    return do()
  File "/usr/local/lib/python3.10/site-packages/redis/client.py", line 817, in <lambda>
    lambda: command(*args, **kwargs),
  File "/usr/local/lib/python3.10/site-packages/redis/client.py", line 838, in try_read
    return conn.read_response(disconnect_on_error=False, push_request=True)
  File "/usr/local/lib/python3.10/site-packages/redis/connection.py", line 512, in read_response
    response = self._parser.read_response(disable_decoding=disable_decoding)
  File "/usr/local/lib/python3.10/site-packages/redis/_parsers/resp2.py", line 15, in read_response
    result = self._read_response(disable_decoding=disable_decoding)
  File "/usr/local/lib/python3.10/site-packages/redis/_parsers/resp2.py", line 25, in _read_response
    raw = self._buffer.readline()
  File "/usr/local/lib/python3.10/site-packages/redis/_parsers/socket.py", line 115, in readline
    self._read_from_socket()
  File "/usr/local/lib/python3.10/site-packages/redis/_parsers/socket.py", line 68, in _read_from_socket
    raise ConnectionError(SERVER_CLOSED_CONNECTION_ERROR)
redis.exceptions.ConnectionError: Connection closed by server.
[2024-09-11 19:38:55,879: WARNING/MainProcess] /usr/local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:391: CPendingDeprecationWarning: 
In Celery 5.1 we introduced an optional breaking change which
on connection loss cancels all currently executed tasks with late acknowledgement enabled.
These tasks cannot be acknowledged as the connection is gone, and the tasks are automatically redelivered
back to the queue. You can enable this behavior using the worker_cancel_long_running_tasks_on_connection_loss
setting. In Celery 5.1 it is set to False by default. The setting will be set to True by default in Celery 6.0.

  warnings.warn(CANCEL_TASKS_BY_DEFAULT, CPendingDeprecationWarning)

